#include <iostream>
#include <Wierzcholek>


class Lista_Sas{

 public:
  
  void dodaj_wierzcholek( int info );
  void dodaj_krawedz( Wierzcholek * wierz1 , Wierzcholek * wierz2 , int info );
  void usun_obiekt(int n);
  void pokaz_elementy();
  void pokaz_n_element(int n);


}

void Lista_Sas::dodaj_wierzcholek( int info ){///////Dodawanie wierzchołku do listy
  Wierzcholek * wierz;
  Wezel<Type> * nowyElem;
  nowyElem = new Wezel<Type>;
  wierz = new Wierzcholek;
  
  if( this->head == nullptr && this->tail == nullptr){
    this->iterator = nowyElem;
    this->head = nowyElem;
    this->tail = nowyElem;
    nowyElem->poprz = nullptr;
    nowyElem->nast = nullptr;
  }
  else
    nowyElem->poprz = this->tail;
  
  nowyElem->obiekt=wierz;
  nowyElem->obiekt->nr = info;
  nowyElem->nast = nullptr;
  if( nowyElem->poprz != nullptr ){
    this->tail->nast = nowyElem;
    this->tail = nowyElem;
  }
  nowyElem->obiekt->wsk_pozycja = nowyElem;
}

void Lista_Sas::dodaj_krawedz( Wierzcholek * wierz1 , Wierzcholek * wierz2 , int info ){ //////////////////////  Dodawanie krawędzi do listy

  Type * kraw;
  Wezel<Type> * nowyElem;
  nowyElem = new Wezel<Type>;
  if( this->head == nullptr && this->tail == nullptr){
    this->iterator = nowyElem;
    this->head = nowyElem;
    this->tail = nowyElem;
    nowyElem->poprz = nullptr;
    nowyElem->nast = nullptr;
  }
  else
    nowyElem->poprz = this->tail;
  nowyElem->obiekt=kraw;
  
  nowyElem->obiekt->poczatek = wierz1;
  nowyElem->obiekt->koniec = wierz2;
  nowyElem->obiekt->waga = info;
  nowyElem->nast = NULL ;
  if( nowyElem->poprz != NULL ){
    this->tail->nast = nowyElem;
    this->tail = nowyElem;
  }
  nowyElem->obiekt->wsk_pozycja = nowyElem;
}


void Lista_Sas::usun_obiekt( int n){//////  Usuwanie elementu z listy
  Wezel<Type> * tmp = new Wezel<Type>;
  
  for( int i=1 ; i<n ; i++)
    this->iterator = this->iterator->nast;

  tmp = this->iterator;

  if( tmp->nast != NULL && tmp->poprz != NULL){//Gdy usuwam srodkowy element
    this->iterator = tmp->nast;
    tmp->poprz->nast =this->iterator;
    this->iterator->poprz = tmp->poprz;
  }
  else if( tmp->nast != NULL && tmp->poprz == NULL){//Gdy usuwam pierwszy element
    this->iterator = tmp->nast;
    this->head = tmp->nast;
    this->iterator->poprz = NULL;
  }
  else if( tmp->nast == NULL && tmp->poprz != NULL){//Gdy usuwam ostatni element
    this->iterator = tmp->poprz;
    this->tail = tmp->poprz;
    this->iterator->nast = NULL;
  }
  else if( this->head != NULL){ //Gdy usuwam jedyny element
    this->head=NULL;
    this->tail=NULL;
  }
  else
    cout<<"Ta lista już jest pusta"<<endl;
  delete tmp;
  this->iterator = this->head;
}

  
void Lista_Sas::pokaz_elementy(){ //////////////////// Pokazanie wszystkich elementów

  while( this->iterator->nast != NULL){
    cout << this->iterator->obiekt->nr <<"   ";
    this->iterator = this->iterator->nast;
  }
  cout<<this->iterator->obiekt->nr<<"   ";
  
  this->iterator = this->head;
}


template <typename Type>  //////////////////// Pokazanie n-tego elementu
void Lista<Type>::pokaz_n_element( int n ){
  
  for( int i=1 ; i<n ; i++)
    this->iterator = this->iterator->nast;
  cout << this->iterator->obiekt->nr <<endl;
  
  this->iterator = this->head;
}
